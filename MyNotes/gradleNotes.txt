Gradle MasterCourse:
====================
DSL -> Domain Specific Language

Gradle depends on Groovy

Groovy is DSL

The build script uses proper programming languge



Groovy:
========

def listName = ["item1" , "item2"]

listName.each{
    println it
}

-> Semi colons are optional in groovy

-> java equivalent will be declaring and initialising the list and using for each to print

class in groovy:
================

class Person{
    String name
    String age

    Person(name,age){
        this.name = name
        this.age = age
    }

    def increaseAge(Integer years){
        this.age += years
    }
}


=> Groovy is backwards compatible with JAVA


-> build scripts are present in build.gradle
-> build.gradle is present in root folder of project


-> Eclipse has buildship plugin 


Using Gradle:
=============

-> create a build.gradle 
in the project 

-> Right click on
 the project -> configure ->
 add gradle nature

-> To run the gradle 
script inside eclipse 
we need to create a
 run configurations

-> if there is error while running 
gradle task may need to import the 
java (properties -> gradle)


GRADLE BUILD SCRIPTS:
=====================

Groovy is almost cmopatible with 
java

we can import classes in the gradle

* Return statement :
====================

-> Return statement in groovy is 
optional

-> if there is more than one line 
 last line value gets returned



Types in Groovy:
===============

-> if the variable if untyped 
we use def keyword.

-> def is anonymous with object

    def = Object

    def date = new Date();

-> Integer will be a Type

-> If we type the variable or method
we impose typeSafety

Groovy Strings:
----------------

-> Groovy doesnt have character
literals

-> strings can be wrapped with double
and single quotes

-> string over multiple lines 

    def str = """
            line1
            line2
            line3
     """

-> String interpolation can be done 
with $variable 

    def x = 4
    println "x is $x"

-> we can interpolate code almost

    def myCourse  = "Mv"
    println "mv ${mv.toUpperCase()}"

-> string interpolation works only with
double quotes


Properties in Groovy:
======================

-> the getters and setters are 
autoimplemented 

    Person p = new Person("asd")

    p.name

-> if we have hashmap 

    map

    we can assign the value to key 
    like map.key = value

Closures:
=========

-> closures are declared by {}

-> we can assign to variable
   using def

   def clo = {}

   println clo

-> closures are like anonymous class in 
java

-> we can use parameter in closures

def clo1 = {String param -> 
println param
}

def clo2 = { a , b , c -> 

println a 
println b


}

-> we can use Closure as type also 

    Closure cloName = {

    }

-> the above is useful when u need to pass
closures as parameter

-> groovy performs type check in runtime


-> Common use for closures

    ->  multi line closure

Code Block design pattern:


Closure Resolution:
===================

Class Person {

    String name = "MV"

    Closure nameSayer = {
        println name
    }
}

def p1 = new Person()
p1.nameSayer()

-> Closure keep the reference to the 
context object in which it is defined
not the value
(so the value will get updated)
(JS also uses same concept)

-> delegate is a property on the closure
its same as owner 
(Can be programmatically changed)

-> we can create a new object and execute
an arbitrary code on that class (without 
having to change the class) and have a
reference to the instances

-> Closures are open anonymous block of code
that can take args , return value 
and assigned to a variable

-> context is owner object
-> delegate is the owner object in groovy



class Per{
    def executeIn (Closure c){
        c.delegate = this
        c()
    }
}

p1.executeIn( {random  code})

Gradle Object Model or Gradle API
=================================

-> Gradle relies on plugins

-> Used by Gradle DSL

6 Key Interfaces:

-> Script Interface

    Script interface is implemented by all
    gradle scripts
    (files ending with .gradle)


    * there is a logger in script

    * apply method is in script If

    * apply {
        println 'hello '
    }


    -> Use -i in run configurations
    (as command line parameter )
       to use logger


     
-> Project Interface

    associated with build.gradle

-> Gradle Interface


-> Settings Interface


-> Task Interface

-> Action Inteface




Gradle Lifecycle:
==================

Gradle build has 3 phases

1.Initialisation

    maps to -> init.gradle + 
                <xxx> gradle

            (collectively -> init scripts)

AND

    settings.gradle

    (not mandatory in single project)





2.configuration

    The project create phase gets configured

    build.gradle

    The delegate object is project

3.Execution

    The build gets performed 

    relies on build.gradle


Note : 

if its multi project -> each project will
have a build.gradle


init.gradle is present in 

.gradle -> init.d folder


-> We have access to the gradle object 
in all lifecycle

    so we can set

    gradle.ext.timestamp


-> 


IMP****
=======

(configuration Phase)
build.gradle -> script obj 
        --> (delegates to) -> Project Interface


(Initialisation Phase)

settings.gradle -> script obj
        --> (delegates to) -> settings If

(init phase)
init.gradle -> script obj
        --> (delegates to )-> Gradle obj


both project and settings objects has access 
to gradle object


First, Gradle scripts 
are configuration scripts. As the script
 executes, it configures an object of a
  particular type. For example, as a 
  build script executes, it configures 
  an object of type Project . 
  This object is called the delegate 
  object of the script.


-> We can either use

if build.gradle:
----------------
gradle.property (or) 
project.gradle.propertyName


if settings.gradle:
------------------
settings.gradle.propertyName

if init.gradle:
--------------

gradle.propertyName

Project object:
---------------

    project object is the default context
or delegate

 
Gradle.properties:
===================

    -> can store in  key value form

    -> this properties are available to 
    scripts in settings.gradle and build.
    gradle

    -> in project root
    -> in GRADLE_USER_HOME

    -> create and add user defined 
    properties ( powerful feature)

